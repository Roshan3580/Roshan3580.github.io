{
    "componentChunkName": "component---src-pages-archive-js",
    "path": "/archive/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"date":"2025-2-6","title":"AI Resume Analyzer","tech":["FastAPI","Uvicorn","PyPDF2","OpenAI API","JavaScript"],"github":"https://github.com/Roshan3580/AI_Resume_Analyzer","external":"https://ai-resume-analyzer-frontend-5e2p.onrender.com/"},"html":"<p>Led the development and enhancement of an AI-driven platform for resume analysis using FastAPI, Uvicorn, PyPDF2, and OpenAI API, achieving a 30% increase in analysis accuracy. Built a dynamic frontend with JavaScript and modern frameworks, delivering an intuitive user experience. Leveraged NLP techniques to provide users with precise, actionable feedback, identifying gaps and optimizing resume quality for better job prospects.</p>"}},{"node":{"frontmatter":{"date":"2025-02-24","title":"Search Engine","tech":["Python","NLTK","BeautifulSoup","PageRank","TF-IDF"],"github":"https://github.com/Roshan3580/Search-Engine","external":""},"html":"<p>Engineered a high-performance search engine prototype processing over 10,000 web documents, combining inverted indexing and graph-based ranking for efficient retrieval. Developed web crawling and indexing pipelines using Python, NLTK, and BeautifulSoup, achieving O(1) term lookups and eliminating 98% of duplicate pages via SHA-256 hashing. Integrated TF-IDF and PageRank algorithms to rank search results, reducing query response time to under 100 ms. Designed a scalable, modular system supporting future extensions like phrase queries and synonym-based expansion.</p>"}},{"node":{"frontmatter":{"date":"2024-6-29","title":"Linked List Implementation","tech":["C++","Data Structures","Object-Oriented Design","Interfaces"],"github":"https://github.com/Roshan3580/Linked-List-Implementation","external":""},"html":"<p>Implemented clean, modular versions of both Singly and Doubly Linked Lists in C++, designed with extensibility and interface-driven architecture in mind. Defined a common abstract interface (<code class=\"language-text\">ILinkedList.hpp</code>) to support polymorphism and future data structure extensions. Developed core operations including insertion, deletion, and traversal with constant-time pointer manipulation. Enabled bidirectional navigation in the doubly linked list variant to support efficient two-way iteration.</p>"}},{"node":{"frontmatter":{"date":"2024-5-14","title":"Smile Language Interpreter","tech":["Python","Lexical Analysis","Parsing","Tokenization"],"github":"https://github.com/Roshan3580/Smile-Interpreter","external":""},"html":"<p>Built a modular interpreter for a BASIC-like programming language with full compatibility to the original Grin language specification. Engineered lexical analysis, streaming parsing, and runtime execution pipelines from scratch and implemented a custom token system, a robust global program state manager, and an extensible instruction set. Designed advanced error handling with detailed lexical, syntactic, and runtime diagnostics. Optimized for fast token processing and low-memory execution, the system supports future language extensions with ease due to its decoupled module structure.</p>"}},{"node":{"frontmatter":{"date":"2024-11-20","title":"Modular Interactive Web Crawler","tech":["Python","BeautifulSoup","Requests","Regex"],"github":"https://github.com/Roshan3580/WebCrawler","external":""},"html":"<p>Developed an interactive, modular web crawler in Python capable of recursively extracting URLs and analyzing web content with user-defined parameters. Implemented real-time crawling with support for domain restriction, file-type filtering via regex, configurable crawl depth, and politeness delay. Used <code class=\"language-text\">requests</code> and <code class=\"language-text\">BeautifulSoup</code> for robust HTTP handling and HTML parsing. Designed the CLI interface to prompt for crawl configuration, and optimized performance through selective traversal and deduplication. Output includes the longest page by word count and top 10 most frequent words, supporting lightweight text analytics at crawl time.</p>"}},{"node":{"frontmatter":{"date":"2024-04-1","title":"DatabaseSearcher","tech":["Python","SQLite","Tkinter","Event-Driven Architecture"],"github":"https://github.com/yourusername/Database-Searcher","external":""},"html":"<p>Developed a modular desktop application for querying and editing structured geographical data using a custom event-driven architecture in Python. Implemented backend logic for SQLite data operations across continent, country, and region tables, supporting full CRUD functionality. Designed an interactive Tkinter GUI with dynamic views and custom dialogs, enabling seamless file-based database interaction. Engineered a scalable system architecture using decoupled event buses, MVC-style data models, and schema-driven validation to ensure flexibility and maintainability.</p>"}},{"node":{"frontmatter":{"date":"2024-02-12","title":"JournalApp","tech":["Python","Web APIs"],"github":"https://github.com/Roshan3580/JournalApp","external":""},"html":"<p>Developed ZotJournal, a python-journal app integrating Web APIs which allows users to manage journals, access the weather and music data, and communicate via direct messaging by connecting to a local server. Designed and executed a modular architecture featuring distinct components for user interface and profile management; created a seamless journal creation process that ensured 100% functional reliability across all aspects of the user interface.</p>"}}]}},"pageContext":{}},
    "staticQueryHashes": ["145970458","1856582320","2031412112","3539500889","3825832676"]}